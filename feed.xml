<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Piotr Mroczek - Przemyślania z warszatu programisty</title>
		<description>Przemyślania z warszatu programisty</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Prosty serwer do developmentu</title>
				<description>&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Python.svg/150px-Python.svg.png&quot; alt=&quot;Logo Python&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
W trakcie codziennej pracy czasami zachodzi potrzeba szybkiego zaserwowania plików do przeglądarki. Najczęściej są to pliku statyczne np. cięty właśnie layout który chcielibyśmy 
szybko podejżeć na innym urządzeniu niż to na którym właśnie pracujemy.&lt;/p&gt;

&lt;p&gt;Ja używam do tego celu polecenia Pythona który z dużym prawdopodobieństwem jest już zainstalowane, jeżeli tylko wcześniej instalowaliśmy Pythona.&lt;/p&gt;

&lt;p&gt;Wywołanie wygląda następująco:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd /home/somedir
$ python -m SimpleHTTPServer
That's it! Now your http server will start in port 8000. You will get the message:

Serving HTTP on 0.0.0.0 port 8000 ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://www.linuxjournal.com/content/tech-tip-really-simple-http-server-python&quot;&gt;Źródło&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Po wywołaniu adresu http://localhost:8000 w przeglądarce, powinniśmy zobaczyć zawartość naszego katalogu.&lt;/p&gt;

&lt;p&gt;Możemy również wywołać ten adres np na przeglądarce w telefonie, jedyne o czym musimy pamiętać to telefon i komputer były podpięte do tej samej sieci WIFI oraz oczywiście odwołanie będzie zawierać IP komputera w sieci lokalnej a nie adres 0.0.0.0&lt;/p&gt;

&lt;h2 id=&quot;problem-z-cache&quot;&gt;Problem z Cache&lt;/h2&gt;
&lt;p&gt;Tak serwowane pliki zwykle będą cachowane przez przeglądarkę, co może być uciążliwe. 
Rozwiązaniem tego problemu jest napisanie małego skryptu który delikatnie zmodyfikuje działanie wcześniej przez nas używanego modułu SimpleHTTPServer.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/piotr-mroczek/4c0c09faf2a3db141623b1007576e6ad.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Wywołanie takiego narzędzia wygląda następująco&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python server.py 8000 
&lt;/code&gt;&lt;/pre&gt;

</description>
				<pubDate>Mon, 07 Nov 2016 00:00:00 +0100</pubDate>
				<link>/development/2016/11/07/Prosty-serwer-HTTP-do-developmentu.html</link>
				<guid isPermaLink="true">/development/2016/11/07/Prosty-serwer-HTTP-do-developmentu.html</guid>
			</item>
		
			<item>
				<title>Test z Mocha</title>
				<description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;framework-do-testowania&quot;&gt;Framework do Testowania&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cldup.com/xFVFxOioAU.svg&quot; alt=&quot;https://cldup.com/xFVFxOioAU.svg&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Mocha jest frameworkiem do testowania w przeglądarce oraz pod NodeJS.  Tak wyglądają &lt;a href=&quot;https://mochajs.org/example/tests.html&quot;&gt;przykładowe testy&lt;/a&gt;  z oficjalnej dokumentacji. Ten zestaw  akurat odpala się w przęglądarce, ale ja napiszę test odpalany w NodeJS.&lt;/p&gt;

&lt;p&gt;Będę potrzebować nowego projektu z zainstalowanym  Mocha.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ mkdir przykladowe-testy-w-Mocha
$ cd przykladowe-testy-w-Mocha
$ npm init -y
Wrote to przykladowe-testy-w-Mocha/przykladowe-testy-w-Mocha/package.json:
{
  &quot;name&quot;: &quot;przykladowe-testy-w-Mocha&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;
  },
  &quot;keywords&quot;: [],
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;
}
$ npm install mocha --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;test&quot;&gt;Test&lt;/h3&gt;

&lt;p&gt;Wykonanie zestawu testów odpalamy w katalogu z projektem za pomocą polecenia mocha co powinno w tej chwili zakończy się błędem, bo przeież nie napisałem jeszcze żadnego scenariusza. 
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ mocha
Warning: Could not find any test files matching pattern: test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
Tworzę katalog tests i za pomocą edytora umieszczam tak plik o nazwie pierwszyTest.js  z następującą treścią: 
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var assert = require('assert');
describe('Array', function() {
  describe('#indexOf()', function() {
    it('should return -1 when the value is not present', function() {
      assert.equal(-1, [1,2,3].indexOf(4));
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mocha

  Array
    #indexOf()
      ✓ should return -1 when the value is not present


  1 passing (8ms)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;gotowe&quot;&gt;Gotowe&lt;/h3&gt;
&lt;p&gt;Dla wygody w pracy codziennej, podepenijmy jeszcze to polecenie pod NPM. Tak aby w przyszłości można było łatwo odpalić test w danym projekcie za pomoca npm test.&lt;/p&gt;

&lt;p&gt;W tej chwili odpalenie testów za pośrednictwem npm będzie kończyć sie błędem: 
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm test
$ 
$ &amp;gt; przykladowe-testy-w-Mocha@1.0.0 test przykladowe-testy-w-Mocha/przykladowe-testy-w-Mocha
$ &amp;gt; echo &quot;Error: no test specified&quot; &amp;amp;&amp;amp; exit 1

Error: no test specified
npm ERR! Test failed.  See above for more details.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
Zmieńmy to, modyfikując plik package.json na wzór:
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;mocha&quot;
  }, 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
Po zapisaniu zmian, NPM powienień wiedzieć że testy powinien wywoływać za pomocą mocha: 
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm test

&amp;gt; przykladowe-testy-w-Mocha@1.0.0 test /home/piotrmroczek/Blog/przykladowe-testy-w-Mocha/przykladowe-testy-w-Mocha
&amp;gt; mocha



  Array
    #indexOf()
      ✓ should return -1 when the value is not present


  1 passing (7ms)


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
Jak widać Mocha jest łatwym w instalacji i dosyć prostym do zrozumienia frameworkiem. Po więcej informacji odsyłam do oficjalnej dokumentacji projektu:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mochajs.org/&quot;&gt;MochaJS&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Sun, 30 Oct 2016 00:00:00 +0200</pubDate>
				<link>/front/2016/10/30/Testy-z-Mocha.html</link>
				<guid isPermaLink="true">/front/2016/10/30/Testy-z-Mocha.html</guid>
			</item>
		
	</channel>
</rss>
